version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: order_entry_db
    environment:
      POSTGRES_DB: order_entry_db
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: order_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5433:5432"
    networks:
      - order_entry_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U order_user -d order_entry_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: order_entry_backend
    environment:
      DATABASE_URL: postgresql://order_user:order_password@database:5432/order_entry_db
      EMAIL_USER: ${EMAIL_USER:-demo@example.com}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-demo-password}
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - order_entry_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: order_entry_frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - order_entry_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  order_entry_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
